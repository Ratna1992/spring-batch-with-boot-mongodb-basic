package com.ratna.boot.batch.csvtomongodb;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;

import com.ratna.boot.batch.itemprocessor.BatchCsvProcessor;
import com.ratna.boot.batch.itemreader.BatchCsvReader;
import com.ratna.boot.batch.itemwriter.BatchCsvWriter;
import com.ratna.boot.batch.joblistener.CsvJobCompletionListener;
import com.ratna.boot.batch.model.Domain;

@EnableBatchProcessing
@Configuration
public class CsvToMongoJob {

	@Autowired
	private JobBuilderFactory jobBuilderFactory;
	@Autowired
	private StepBuilderFactory stepBuilderFactory;

	@Autowired
	BatchCsvReader batchCsvReader;

	@Autowired
	BatchCsvWriter batchCsvWriter;

	// starts the step
	@Bean
	public Job readCsvFile() {
		return jobBuilderFactory.get("readCsvFile").incrementer(new RunIdIncrementer()).listener(csvListener())
				.start(step1()).build();
	}

	// starts the proces
	private Step step1() {
		return stepBuilderFactory.get("step1").<Domain, Domain>chunk(10).reader(batchCsvReader.reader())
				.processor(new BatchCsvProcessor()).writer(batchCsvWriter.writer()).build();
	}

	public FlatFileItemReader<Domain> reader() {
		FlatFileItemReader<Domain> reader = new FlatFileItemReader<>();
		reader.setResource(new ClassPathResource("sample-data.csv"));
		reader.setLineMapper(new DefaultLineMapper<Domain>() {
			{
				setLineTokenizer(new DelimitedLineTokenizer() {
					{
						setNames(new String[] { "id", "name" });
					}
				});
				setFieldSetMapper(new BeanWrapperFieldSetMapper<Domain>() {
					{
						setTargetType(Domain.class);
					}
				});
			}
		});
		return reader;
	}

	// gets the listener
	@Bean
	public JobExecutionListener csvListener() {
		return new CsvJobCompletionListener();
	}

}
